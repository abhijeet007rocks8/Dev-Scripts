{"ast":null,"code":"var domparser = require('./domparser');\n\nvar formatDOM = require('./utilities').formatDOM;\n\nvar DIRECTIVE_REGEX = /<(![a-zA-Z\\s]+)>/; // e.g., <!doctype html>\n\n/**\n * Parses HTML string to DOM nodes in browser.\n *\n * @param  {string} html  - HTML markup.\n * @return {DomElement[]} - DOM elements.\n */\n\nfunction HTMLDOMParser(html) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (html === '') {\n    return [];\n  } // match directive\n\n\n  var match = html.match(DIRECTIVE_REGEX);\n  var directive;\n\n  if (match && match[1]) {\n    directive = match[1];\n  }\n\n  return formatDOM(domparser(html), null, directive);\n}\n\nmodule.exports = HTMLDOMParser;","map":{"version":3,"sources":["/home/kriptonian/Desktop/CodeMaster/react/crypto_tracker/node_modules/html-dom-parser/lib/client/html-to-dom.js"],"names":["domparser","require","formatDOM","DIRECTIVE_REGEX","HTMLDOMParser","html","TypeError","match","directive","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,SAAvC;;AAEA,IAAIC,eAAe,GAAG,kBAAtB,C,CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIC,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAED,MAAID,IAAI,KAAK,EAAb,EAAiB;AACf,WAAO,EAAP;AACD,GAP0B,CAS3B;;;AACA,MAAIE,KAAK,GAAGF,IAAI,CAACE,KAAL,CAAWJ,eAAX,CAAZ;AACA,MAAIK,SAAJ;;AAEA,MAAID,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlB,EAAuB;AACrBC,IAAAA,SAAS,GAAGD,KAAK,CAAC,CAAD,CAAjB;AACD;;AAED,SAAOL,SAAS,CAACF,SAAS,CAACK,IAAD,CAAV,EAAkB,IAAlB,EAAwBG,SAAxB,CAAhB;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBN,aAAjB","sourcesContent":["var domparser = require('./domparser');\nvar formatDOM = require('./utilities').formatDOM;\n\nvar DIRECTIVE_REGEX = /<(![a-zA-Z\\s]+)>/; // e.g., <!doctype html>\n\n/**\n * Parses HTML string to DOM nodes in browser.\n *\n * @param  {string} html  - HTML markup.\n * @return {DomElement[]} - DOM elements.\n */\nfunction HTMLDOMParser(html) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (html === '') {\n    return [];\n  }\n\n  // match directive\n  var match = html.match(DIRECTIVE_REGEX);\n  var directive;\n\n  if (match && match[1]) {\n    directive = match[1];\n  }\n\n  return formatDOM(domparser(html), null, directive);\n}\n\nmodule.exports = HTMLDOMParser;\n"]},"metadata":{},"sourceType":"script"}