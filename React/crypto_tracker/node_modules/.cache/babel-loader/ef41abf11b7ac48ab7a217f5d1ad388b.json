{"ast":null,"code":"var Parser = require(\"./Parser.js\");\n\nvar DomHandler = require(\"domhandler\");\n\nfunction defineProp(name, value) {\n  delete module.exports[name];\n  module.exports[name] = value;\n  return value;\n}\n\nmodule.exports = {\n  Parser: Parser,\n  Tokenizer: require(\"./Tokenizer.js\"),\n  ElementType: require(\"domelementtype\"),\n  DomHandler: DomHandler,\n\n  get FeedHandler() {\n    return defineProp(\"FeedHandler\", require(\"./FeedHandler.js\"));\n  },\n\n  get Stream() {\n    return defineProp(\"Stream\", require(\"./Stream.js\"));\n  },\n\n  get WritableStream() {\n    return defineProp(\"WritableStream\", require(\"./WritableStream.js\"));\n  },\n\n  get ProxyHandler() {\n    return defineProp(\"ProxyHandler\", require(\"./ProxyHandler.js\"));\n  },\n\n  get DomUtils() {\n    return defineProp(\"DomUtils\", require(\"domutils\"));\n  },\n\n  get CollectingHandler() {\n    return defineProp(\"CollectingHandler\", require(\"./CollectingHandler.js\"));\n  },\n\n  // For legacy support\n  DefaultHandler: DomHandler,\n\n  get RssHandler() {\n    return defineProp(\"RssHandler\", this.FeedHandler);\n  },\n\n  //helper methods\n  parseDOM: function (data, options) {\n    var handler = new DomHandler(options);\n    new Parser(handler, options).end(data);\n    return handler.dom;\n  },\n  parseFeed: function (feed, options) {\n    var handler = new module.exports.FeedHandler(options);\n    new Parser(handler, options).end(feed);\n    return handler.dom;\n  },\n  createDomStream: function (cb, options, elementCb) {\n    var handler = new DomHandler(cb, options, elementCb);\n    return new Parser(handler, options);\n  },\n  // List of all events that the parser emits\n  EVENTS: {\n    /* Format: eventname: number of arguments */\n    attribute: 2,\n    cdatastart: 0,\n    cdataend: 0,\n    text: 1,\n    processinginstruction: 2,\n    comment: 1,\n    commentend: 0,\n    closetag: 1,\n    opentag: 2,\n    opentagname: 1,\n    error: 1,\n    end: 0\n  }\n};","map":{"version":3,"sources":["/home/kriptonian/Desktop/CodeMaster/react/cryptocurrency_tracker/node_modules/react-html-parser/node_modules/htmlparser2/lib/index.js"],"names":["Parser","require","DomHandler","defineProp","name","value","module","exports","Tokenizer","ElementType","FeedHandler","Stream","WritableStream","ProxyHandler","DomUtils","CollectingHandler","DefaultHandler","RssHandler","parseDOM","data","options","handler","end","dom","parseFeed","feed","createDomStream","cb","elementCb","EVENTS","attribute","cdatastart","cdataend","text","processinginstruction","comment","commentend","closetag","opentag","opentagname","error"],"mappings":"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","sourcesContent":["var Parser = require(\"./Parser.js\");\nvar DomHandler = require(\"domhandler\");\n\nfunction defineProp(name, value) {\n    delete module.exports[name];\n    module.exports[name] = value;\n    return value;\n}\n\nmodule.exports = {\n    Parser: Parser,\n    Tokenizer: require(\"./Tokenizer.js\"),\n    ElementType: require(\"domelementtype\"),\n    DomHandler: DomHandler,\n    get FeedHandler() {\n        return defineProp(\"FeedHandler\", require(\"./FeedHandler.js\"));\n    },\n    get Stream() {\n        return defineProp(\"Stream\", require(\"./Stream.js\"));\n    },\n    get WritableStream() {\n        return defineProp(\"WritableStream\", require(\"./WritableStream.js\"));\n    },\n    get ProxyHandler() {\n        return defineProp(\"ProxyHandler\", require(\"./ProxyHandler.js\"));\n    },\n    get DomUtils() {\n        return defineProp(\"DomUtils\", require(\"domutils\"));\n    },\n    get CollectingHandler() {\n        return defineProp(\n            \"CollectingHandler\",\n            require(\"./CollectingHandler.js\")\n        );\n    },\n    // For legacy support\n    DefaultHandler: DomHandler,\n    get RssHandler() {\n        return defineProp(\"RssHandler\", this.FeedHandler);\n    },\n    //helper methods\n    parseDOM: function(data, options) {\n        var handler = new DomHandler(options);\n        new Parser(handler, options).end(data);\n        return handler.dom;\n    },\n    parseFeed: function(feed, options) {\n        var handler = new module.exports.FeedHandler(options);\n        new Parser(handler, options).end(feed);\n        return handler.dom;\n    },\n    createDomStream: function(cb, options, elementCb) {\n        var handler = new DomHandler(cb, options, elementCb);\n        return new Parser(handler, options);\n    },\n    // List of all events that the parser emits\n    EVENTS: {\n        /* Format: eventname: number of arguments */\n        attribute: 2,\n        cdatastart: 0,\n        cdataend: 0,\n        text: 1,\n        processinginstruction: 2,\n        comment: 1,\n        commentend: 0,\n        closetag: 1,\n        opentag: 2,\n        opentagname: 1,\n        error: 1,\n        end: 0\n    }\n};\n"]},"metadata":{},"sourceType":"script"}