{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = htmlAttributesToReact;\n\nvar _BooleanAttributes = require('../dom/attributes/BooleanAttributes');\n\nvar _BooleanAttributes2 = _interopRequireDefault(_BooleanAttributes);\n\nvar _ReactAttributes = require('../dom/attributes/ReactAttributes');\n\nvar _ReactAttributes2 = _interopRequireDefault(_ReactAttributes);\n\nvar _isValidTagOrAttributeName = require('./isValidTagOrAttributeName');\n\nvar _isValidTagOrAttributeName2 = _interopRequireDefault(_isValidTagOrAttributeName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Returns the parsed attribute value taking into account things like boolean attributes\n *\n * @param {String} attribute The name of the attribute\n * @param {*} value The value of the attribute from the HTML\n * @returns {*} The parsed attribute value\n */\n\n\nvar getParsedAttributeValue = function getParsedAttributeValue(attribute, value) {\n  // if the attribute if a boolean then it's value should be the same as it's name\n  // e.g. disabled=\"disabled\"\n  var lowerBooleanAttributes = _BooleanAttributes2.default.map(function (attr) {\n    return attr.toLowerCase();\n  });\n\n  if (lowerBooleanAttributes.indexOf(attribute.toLowerCase()) >= 0) {\n    value = attribute;\n  }\n\n  return value;\n};\n/**\n * Takes an object of standard HTML property names and converts them to their React counterpart. If the react\n * version does not exist for an attribute then just use it as it is\n *\n * @param {Object} attributes The HTML attributes to convert\n * @returns {Object} The React attributes\n */\n\n\nfunction htmlAttributesToReact(attributes) {\n  return Object.keys(attributes).filter(function (attr) {\n    return (0, _isValidTagOrAttributeName2.default)(attr);\n  }).reduce(function (mappedAttributes, attribute) {\n    // lowercase the attribute name and find it in the react attribute map\n    var lowerCaseAttribute = attribute.toLowerCase(); // format the attribute name\n\n    var name = _ReactAttributes2.default[lowerCaseAttribute] || lowerCaseAttribute; // add the parsed attribute value to the mapped attributes\n\n    mappedAttributes[name] = getParsedAttributeValue(name, attributes[attribute]);\n    return mappedAttributes;\n  }, {});\n}","map":{"version":3,"sources":["/home/kriptonian/Desktop/CodeMaster/react/cryptocurrency_tracker/node_modules/react-html-parser/lib/utils/htmlAttributesToReact.js"],"names":["Object","defineProperty","exports","value","default","htmlAttributesToReact","_BooleanAttributes","require","_BooleanAttributes2","_interopRequireDefault","_ReactAttributes","_ReactAttributes2","_isValidTagOrAttributeName","_isValidTagOrAttributeName2","obj","__esModule","getParsedAttributeValue","attribute","lowerBooleanAttributes","map","attr","toLowerCase","indexOf","attributes","keys","filter","reduce","mappedAttributes","lowerCaseAttribute","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,qBAAlB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,qCAAD,CAAhC;;AAEA,IAAIC,mBAAmB,GAAGC,sBAAsB,CAACH,kBAAD,CAAhD;;AAEA,IAAII,gBAAgB,GAAGH,OAAO,CAAC,mCAAD,CAA9B;;AAEA,IAAII,iBAAiB,GAAGF,sBAAsB,CAACC,gBAAD,CAA9C;;AAEA,IAAIE,0BAA0B,GAAGL,OAAO,CAAC,6BAAD,CAAxC;;AAEA,IAAIM,2BAA2B,GAAGJ,sBAAsB,CAACG,0BAAD,CAAxD;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEV,IAAAA,OAAO,EAAEU;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,SAAjC,EAA4Cd,KAA5C,EAAmD;AAE/E;AACA;AACA,MAAIe,sBAAsB,GAAGV,mBAAmB,CAACJ,OAApB,CAA4Be,GAA5B,CAAgC,UAAUC,IAAV,EAAgB;AAC3E,WAAOA,IAAI,CAACC,WAAL,EAAP;AACD,GAF4B,CAA7B;;AAGA,MAAIH,sBAAsB,CAACI,OAAvB,CAA+BL,SAAS,CAACI,WAAV,EAA/B,KAA2D,CAA/D,EAAkE;AAChElB,IAAAA,KAAK,GAAGc,SAAR;AACD;;AAED,SAAOd,KAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,qBAAT,CAA+BkB,UAA/B,EAA2C;AAEzC,SAAOvB,MAAM,CAACwB,IAAP,CAAYD,UAAZ,EAAwBE,MAAxB,CAA+B,UAAUL,IAAV,EAAgB;AACpD,WAAO,CAAC,GAAGP,2BAA2B,CAACT,OAAhC,EAAyCgB,IAAzC,CAAP;AACD,GAFM,EAEJM,MAFI,CAEG,UAAUC,gBAAV,EAA4BV,SAA5B,EAAuC;AAE/C;AACA,QAAIW,kBAAkB,GAAGX,SAAS,CAACI,WAAV,EAAzB,CAH+C,CAK/C;;AACA,QAAIQ,IAAI,GAAGlB,iBAAiB,CAACP,OAAlB,CAA0BwB,kBAA1B,KAAiDA,kBAA5D,CAN+C,CAQ/C;;AACAD,IAAAA,gBAAgB,CAACE,IAAD,CAAhB,GAAyBb,uBAAuB,CAACa,IAAD,EAAON,UAAU,CAACN,SAAD,CAAjB,CAAhD;AAEA,WAAOU,gBAAP;AACD,GAdM,EAcJ,EAdI,CAAP;AAeD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = htmlAttributesToReact;\n\nvar _BooleanAttributes = require('../dom/attributes/BooleanAttributes');\n\nvar _BooleanAttributes2 = _interopRequireDefault(_BooleanAttributes);\n\nvar _ReactAttributes = require('../dom/attributes/ReactAttributes');\n\nvar _ReactAttributes2 = _interopRequireDefault(_ReactAttributes);\n\nvar _isValidTagOrAttributeName = require('./isValidTagOrAttributeName');\n\nvar _isValidTagOrAttributeName2 = _interopRequireDefault(_isValidTagOrAttributeName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the parsed attribute value taking into account things like boolean attributes\n *\n * @param {String} attribute The name of the attribute\n * @param {*} value The value of the attribute from the HTML\n * @returns {*} The parsed attribute value\n */\nvar getParsedAttributeValue = function getParsedAttributeValue(attribute, value) {\n\n  // if the attribute if a boolean then it's value should be the same as it's name\n  // e.g. disabled=\"disabled\"\n  var lowerBooleanAttributes = _BooleanAttributes2.default.map(function (attr) {\n    return attr.toLowerCase();\n  });\n  if (lowerBooleanAttributes.indexOf(attribute.toLowerCase()) >= 0) {\n    value = attribute;\n  }\n\n  return value;\n};\n\n/**\n * Takes an object of standard HTML property names and converts them to their React counterpart. If the react\n * version does not exist for an attribute then just use it as it is\n *\n * @param {Object} attributes The HTML attributes to convert\n * @returns {Object} The React attributes\n */\nfunction htmlAttributesToReact(attributes) {\n\n  return Object.keys(attributes).filter(function (attr) {\n    return (0, _isValidTagOrAttributeName2.default)(attr);\n  }).reduce(function (mappedAttributes, attribute) {\n\n    // lowercase the attribute name and find it in the react attribute map\n    var lowerCaseAttribute = attribute.toLowerCase();\n\n    // format the attribute name\n    var name = _ReactAttributes2.default[lowerCaseAttribute] || lowerCaseAttribute;\n\n    // add the parsed attribute value to the mapped attributes\n    mappedAttributes[name] = getParsedAttributeValue(name, attributes[attribute]);\n\n    return mappedAttributes;\n  }, {});\n}"]},"metadata":{},"sourceType":"script"}